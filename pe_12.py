

# The sequence of triangle numbers is generated by adding the natural numbers. So the 7th triangle number would be 1 + 2 + 3 + 4 + 5 + 6 + 7 = 28. The first ten terms would be:

# 1, 3, 6, 10, 15, 21, 28, 36, 45, 55, ...

# Let us list the factors of the first seven triangle numbers:

	 # 1: 1
	 # 3: 1,3
	 # 6: 1,2,3,6
	# 10: 1,2,5,10
	# 15: 1,3,5,15
	# 21: 1,3,7,21
	# 28: 1,2,4,7,14,28

# We can see that 28 is the first triangle number to have over five divisors.

# What is the value of the first triangle number to have over five hundred divisors?

from pe_03 import get_prime_factors
from math import sqrt

divisors = []
n = 3
triangle = 0
biggest = 0
while biggest < 500:
	divisors.clear()
	triangle = sum(range(n))
	if triangle % 510510 == 0: # 510510 == (2*3*5*7*11*13*17) - 7 smallest distinct primes
		for i in range(1, int(sqrt(triangle))):
			if triangle % i == 0:
				divisors.append(i)
	n += 1
	if biggest < len(divisors):
		biggest = len(divisors) * 2
		print(n, biggest, triangle, get_prime_factors(triangle))
print(triangle)